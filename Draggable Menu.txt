import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: Dock(
            items: const [
              Icons.person,
              Icons.message,
              Icons.call,
              Icons.camera,
              Icons.photo,
            ],
            builder: (e) {
              return Container(
                constraints: const BoxConstraints(minWidth: 48),
                height: 48,
                margin: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8),
                  color: Colors.primaries[e.hashCode % Colors.primaries.length],
                ),
                child: Center(child: Icon(e, color: Colors.white)),
              );
            },
          ),
        ),
      ),
    );
  }
}

class Dock<T extends Object> extends StatefulWidget {
  const Dock({
    super.key,
    required this.items,
    required this.builder,
  });

  final List<T> items;

  final Widget Function(T) builder;

  @override
  State<Dock<T>> createState() => _DockState<T>();
}

class _DockState<T extends Object> extends State<Dock<T>> {
  late List<T> _items;

  int? _draggingIndex;

  @override
  void initState() {
    super.initState();
    _items = widget.items.toList();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        color: Colors.black12,
      ),
      padding: const EdgeInsets.all(4),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: _buildDockItems(),
      ),
    );
  }

  List<Widget> _buildDockItems() {
    return List.generate(_items.length, (index) {
      return Draggable<T>(
        data: _items[index],
        onDragStarted: () {
          setState(() {
            _draggingIndex = index;
          });
        },
        onDragEnd: (_) {
          setState(() {
            _draggingIndex = null;
          });
        },
        feedback: Opacity(
          opacity: 0.7,
          child: widget.builder(_items[index]),
        ),
        childWhenDragging: const SizedBox.shrink(),
        child: DragTarget<T>(
          onWillAccept: (data) {
            if (_draggingIndex != null && _draggingIndex != index) {
              setState(() {
                final draggedItem = _items.removeAt(_draggingIndex!);
                _items.insert(index, draggedItem);
                _draggingIndex = index;
              });
            }
            return true;
          },
          builder: (context, candidateData, rejectedData) {
            return AnimatedSwitcher(
              duration: const Duration(milliseconds: 200),
              child: widget.builder(_items[index]),
            );
          },
        ),
      );
    });
  }
}
